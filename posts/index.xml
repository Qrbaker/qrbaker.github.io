<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Quentin Baker</title><link>https://www.quentb.com/posts/</link><description>Quentin Baker (Posts)</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 02 Jan 2022 10:24:27 -0400</lastBuildDate><atom:link href="https://www.quentb.com/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Considering the Philosophy of Squashing</title><link>https://www.quentb.com/posts/git-squashing/</link><pubDate>Sun, 02 Jan 2022 10:24:27 -0400</pubDate><guid>https://www.quentb.com/posts/git-squashing/</guid><description>&lt;p>&lt;em>Editor&amp;rsquo;s Note: I don&amp;rsquo;t&lt;/em> like &lt;em>having to squash or rebase commits into a linear history. I am just operating in an environment where this is a dictated requirement. The rest of the post continues with the assumption that this preference is non-negotiable.&lt;/em>&lt;/p>
&lt;hr>
&lt;p>I have a sort of &amp;ldquo;git philosophy&amp;rdquo; discussion to pose. Recently, I had a massive headache doing an interactive
rebase because I have a habit of periodically merging upstream master/dev/main/whatever branch commits into my
working branch to keep the work of resolving merge conflicts to a minimum.&lt;br>
Unfortunately, when you have the situation of:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">a----b----c----d----e----f
\ \
g----h----i----j----k----l
&lt;/code>&lt;/pre>&lt;/div>&lt;p>doing something like &lt;code>git rebase -i g&lt;/code> will try and rewrite these pulls (a/b/c and d/e/f), even if you leave
them as &amp;ldquo;picked&amp;rdquo; commits, and you only mark your commits (g/h/i/j/k/l) as &amp;ldquo;squash&amp;rdquo;. I really, really hate the
idea of effectively changing/rewriting other developer&amp;rsquo;s commits; it can screw up stuff like git logs and git
blames.&lt;/p>
&lt;p>My workaround, of sorts, as been to:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>checkout a new branch from the upstream (&lt;code>git checkout -b merge-temp develop&lt;/code>)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>do a &amp;ldquo;squash merge&amp;rdquo; to that branch from my working branch (&lt;code>git merge --squash feature/my-branch merge-temp&lt;/code>)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>reset my working branch to the resulting merge commit (&lt;code>git checkout feature/my-branch &amp;amp;&amp;amp; git reset --hard merge-temp&lt;/code>)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Delete the temp branch (&lt;code>git branch -D merge-temp&lt;/code>)&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>This basically does the following:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">a----b----c----d----e----f
\ \
g----h----i----j----k----l
&lt;/code>&lt;/pre>&lt;/div>&lt;p>becomes&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">a----b----c----d----e----f
\
g&amp;#39;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>commits g through l get &amp;ldquo;rolled up&amp;rdquo; into a new commit, g', which can be merged. As a nice side-effect, a
&lt;code>git merge --squash&lt;/code> produces a very nice &amp;ldquo;squash summary&amp;rdquo; of each commit with its hash, author, and commit
message in the squash commit message.&lt;/p>
&lt;hr>
&lt;p>Now, on doing some more reading about git best practices, this LWN article came to my attention:
&lt;a href="https://lwn.net/Articles/328436/">https://lwn.net/Articles/328436/&lt;/a>. In it, it talks about how Linus Torvalds handles the Linux kernel merges:&lt;/p>
&lt;blockquote>
&lt;p>I want clean history, but that really means (a) clean and (b) history.
People can (and probably should) rebase their &lt;em>private&lt;/em> trees (their own
work). That&amp;rsquo;s a &lt;em>cleanup&lt;/em>. But never other peoples code. That&amp;rsquo;s a &amp;ldquo;destroy
history&amp;rdquo;
So the history part is fairly easy. There&amp;rsquo;s only one major rule, and one
minor clarification:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>You must never EVER destroy other peoples history. You must not rebase
commits other people did. Basically, if it doesn&amp;rsquo;t have your sign-off
on it, it&amp;rsquo;s off limits: you can&amp;rsquo;t rebase it, because it&amp;rsquo;s not yours.&lt;/p>
&lt;p>Notice that this really is about other peoples &lt;em>history&lt;/em>, not about
other peoples &lt;em>code&lt;/em>. If they sent stuff to you as an emailed patch,
and you applied it with &amp;ldquo;git am -s&amp;rdquo;, then it&amp;rsquo;s their code, but it&amp;rsquo;s
&lt;em>your&lt;/em> history.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>It seems he feels that (a) people &lt;em>should&lt;/em> squash their local histories before committing upstream,
and (b) you &lt;strong>should not&lt;/strong> periodically merge from upstream.
That makes sense when you&amp;rsquo;re dealing with hundreds of commits from dozens of contributors, but what
about us mere mortal devs, who work with maybe 7 developers
on a project at a time?&lt;/p>
&lt;p>I&amp;rsquo;d love to hear other, more experienced devs' thoughts.&lt;/p></description></item><item><title>Getting FreeBSD + xfce4 up and running on Hyper-V</title><link>https://www.quentb.com/posts/freebsd-hyperv-tutorial/</link><pubDate>Fri, 12 Nov 2021 20:22:14 -0400</pubDate><guid>https://www.quentb.com/posts/freebsd-hyperv-tutorial/</guid><description>&lt;p>&lt;img src="freebsd_3.gif" alt="A FreeBSD Banner">
&lt;img src="hyperv.png" alt="Windows Hyper-V">&lt;/p>
&lt;p>This document began as a checklist for myself, as I tried and failed repeatedly to get a desktop environment working in FreeBSD inside Hyper-V on Windows. I used to use VMWare Player for hosting BSD, but it is locked down and an extra program to run. A Microsoft employee and personal friend pointed me to Hyper-V Manager, a tool built-in to Windows 10+11 Pro/Enterprise that allows for the easy creation and management of VMs. Did I mention its built-in?&lt;/p>
&lt;p>FreeBSD has had Hyper-V virtualization support for some time, and is mostly out-of-the-box&amp;hellip; if you are sticking to a virtual terminal. Command line is fine for most users running BSD on Hyper-V, I&amp;rsquo;m sure, but I need a desktop environment to maintain a few BSD desktop packages.&lt;/p>
&lt;p>After several days of scrounging around, I had managed to cobble together the process. There are a couple &amp;ldquo;gotchas&amp;rdquo; that aren&amp;rsquo;t well-known, so for posterity I have written this guide in the hope that it might save others down the road the frustrations I went through.&lt;/p>
&lt;p>Indeed, this is going on my blog so I myself can reference it in the future!&lt;/p>
&lt;p>Before we get into things, I would like to thank the authors of two incredible resources. The first is the many contributors that have built the &lt;a href="https://docs.freebsd.org/en/books/handbook">FreeBSD Handbook&lt;/a>. I reference it later on, but this is to BSD what &lt;a href="https://wiki.archlinux.org/">ArchWiki&lt;/a> is to Linux.&lt;/p>
&lt;p>Second is the author of &lt;a href="https://unixsheikh.com/index.html">unixsheikh.com&lt;/a>. This site first &lt;a href="https://unixsheikh.com/articles/freebsd-is-an-amazing-operating-system.html">introduced me to BSD&lt;/a>, &lt;a href="https://unixsheikh.com/articles/why-you-should-migrate-everything-from-linux-to-bsd.html">persuaded me to try it&lt;/a>, and walked me through getting it set up. Many parts of this tutorial are based on a similar tutorial series from here (linked to in the Epilogue). I still use Linux quite a lot, but it isn&amp;rsquo;t the sole OS in my stack, thanks to this site.&lt;/p>
&lt;p>Anyway, to the good stuff!&lt;/p>
&lt;hr>
&lt;h2 id="getting-started">Getting Started
&lt;span>&lt;a href="#getting-started">#&lt;/a>&lt;/span>
&lt;/h2>&lt;p>&lt;a href="https://www.freebsd.org/where/">Download&lt;/a> the install &lt;strong>ISO&lt;/strong>. Yes, there is a pre-made virtual machine image, but beware its tempation! The .vhd file is setup with a hilariously small size, and resizing paritions in FreeBSD on Hyper-V is a bit of a pain.&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/p>
&lt;h3 id="hyper-v-setup">Hyper-V Setup
&lt;span>&lt;a href="#hyper-v-setup">#&lt;/a>&lt;/span>
&lt;/h3>&lt;p>Create a new &lt;strong>Generation 1&lt;/strong> VM. &lt;a href="https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=210175">At the time of this writing, FreeBSD does not have a mouse driver for Gen 2 VMs&lt;/a>.&lt;/p>
&lt;p>Once you&amp;rsquo;ve set up your VM and pointed it to your ISO, go ahead and follow the standard install prompts. If you want a well-written walkthrough of this process, &lt;a href="https://docs.freebsd.org/en/books/handbook/bsdinstall/#bsdinstall-start">the FreeBSD Handbook has you covered&lt;/a>. In fact, I &lt;strong>highly recommend&lt;/strong> keeping the handbook open in a browser whenever you&amp;rsquo;re trying something new-ish. I like the &lt;a href="https://docs.freebsd.org/en/books/handbook/book/">version with the whole text on one page&lt;/a>: It makes it easy to &lt;code>ctrl&lt;/code>+&lt;code>F&lt;/code> for a term I need clarification on. Fair warning though, it takes a second to load.&lt;/p>
&lt;p>Anyway, once set up, log in as root (or as your user and then use &lt;code>su&lt;/code>). Going forward, I will denote commands executed as root with a hash symbol (#) and user commands with a dollar sign ($).&lt;/p>
&lt;h2 id="building-the-base">Building the Base
&lt;span>&lt;a href="#building-the-base">#&lt;/a>&lt;/span>
&lt;/h2>&lt;p>Once logged in, setup &lt;code>pkg&lt;/code> by running the command &lt;code>pkg&lt;/code> and following the first-time setup prompts.&lt;/p>
&lt;p>If you intend to do ports development (like I am) you should switch from the default (quarterly) branch to the &amp;ldquo;latest&amp;rdquo; branch for packages.&lt;/p>
&lt;ol>
&lt;li>Create a configuration file:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text"># mkdir -p /usr/local/etc/pkg/repos
# vi /usr/local/etc/pkg/repos/FreeBSD.conf
&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>Insert the following:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">FreeBSD: {
url: &amp;#34;pkg+https://pkg.FreeBSD.org/${ABI}/latest&amp;#34;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>Update the package database:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text"># pkg update
&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="4">
&lt;li>Verify &lt;code>pkg&lt;/code> is now on the &amp;ldquo;latest&amp;rdquo; repository:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text"># pkg -vv
...
Repositories:
FreeBSD: {
url : &amp;#34;pkg+https://pkg.FreeBSD.org/FreeBSD:13:amd64/latest&amp;#34;,
enabled : yes,
priority : 0,
mirror_type : &amp;#34;SRV&amp;#34;,
signature_type : &amp;#34;FINGERPRINTS&amp;#34;,
fingerprints : &amp;#34;/usr/share/keys/pkg&amp;#34;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The important part here is the &lt;code>url&lt;/code> field. If you aren&amp;rsquo;t on a 64-bit PC chip, the &lt;code>amd64&lt;/code> may be different (e.g. x86, aarch64, etc.)&lt;/p>
&lt;p>If &lt;code>vt&lt;/code> is not the default virtual console set it as such by adding this line to &lt;code>/boot/loader.conf&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">kern.vty&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;vt&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you aren&amp;rsquo;t comfortable using the pre-installed &lt;code>vi&lt;/code>, go ahead and install your editor of choice with &lt;code>pkg&lt;/code> at this point, i.e. &lt;code>pkg install nano&lt;/code>.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>(Optional) speed up boot process by lowering the pause at the boot screen by adding this below the line we just added in &lt;code>loader.conf&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">autoboot_delay&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;2&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="some-other-useful-tools">Some other useful tools
&lt;span>&lt;a href="#some-other-useful-tools">#&lt;/a>&lt;/span>
&lt;/h2>&lt;p>I do most of my text editing in neovim. I still like to use the &lt;code>vim&lt;/code> command though, and I don&amp;rsquo;t like setting up aliases in every single shell/user combo.
So instead I install neovim, and symlink the &lt;code>nvim&lt;/code> binary file to &lt;code>vim&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text"># pkg install neovim
# ln -s /usr/local/bin/nvim /usr/local/bin/vim
&lt;/code>&lt;/pre>&lt;/div>&lt;p>I also install a couple other utilities at this time:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text"># pkg install git curl doas
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="setting-up-doas">Setting up &lt;code>doas&lt;/code>
&lt;span>&lt;a href="#setting-up-doas">#&lt;/a>&lt;/span>
&lt;/h2>&lt;p>&lt;code>doas&lt;/code> is basically an alternative tool to &lt;code>sudo&lt;/code> from Linux land. There is also a port of &lt;code>sudo&lt;/code> to the BSDs, but &lt;code>doas&lt;/code> is &lt;a href="https://www.reddit.com/r/freebsd/comments/klqt7k/why_are_people_sold_on_doas/ghgk1rn/">preferred for several reasons&lt;/a>, chief among them safety and ease of configuration&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>I configure &lt;code>doas&lt;/code> to allow &lt;code>pkg&lt;/code> and shutdown/reboot commands without a password, and other commands with verification. You do this by adding the following to &lt;code>/usr/local/etc/doas.conf&lt;/code>:&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">permit :wheel
permit nopass :wheel cmd shutdown
permit nopass :wheel cmd pkg
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>:wheel&lt;/code> in this case means &amp;ldquo;any user in the group &lt;code>wheel&lt;/code>&amp;rdquo;. If you wanted to only permit a specific user (i.e. user &amp;lsquo;jane&amp;rsquo;) you would so so like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">permit jane
permit nopass jane cmd shutdown
permit nopass jane cmd pkg
&lt;/code>&lt;/pre>&lt;/div>&lt;p>(Note that jane has no &amp;ldquo;:&amp;rdquo; before it.)&lt;/p>
&lt;p>Some versions of BSD (and Linux ports of &lt;code>doas&lt;/code>) also support a &lt;code>persist&lt;/code> keyword, which allows subsequent uses of &lt;code>doas&lt;/code> to not require another password auth for a time, similar to &lt;code>sudo&lt;/code>. FreeBSD does not support this; adding this keyword will do nothing. If you need to do a bunch of commands as root in a row, it is &lt;a href="https://github.com/slicer69/doas/issues/37">recommended&lt;/a> to use &lt;code>doas -s&lt;/code>, run the commands, then &lt;code>exit&lt;/code>.&lt;/p>
&lt;h2 id="getting-or-giting-ports">Getting (or &lt;code>Git&lt;/code>ing) ports
&lt;span>&lt;a href="#getting-or-giting-ports">#&lt;/a>&lt;/span>
&lt;/h2>&lt;p>FreeBSD &lt;em>used&lt;/em> to be distributed on a code management system called subversion, or &lt;code>svn&lt;/code>. There is still some legacy support for this, but all the main code repositories have switched over to using &lt;code>git&lt;/code>. Because of this, I recommend &lt;code>git clone&lt;/code>-ing the Ports tree instead of the old &lt;code>portsnap&lt;/code> method:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text"># git clone https://git.FreeBSD.org/ports.git /usr/ports
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note that this downloads the HEAD of the tree, which will be the bleeding edge latest packages. If for some reason, you want to switch to a different quarterly branch (i.e. for stability) you can simply checkout the relevant branch:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text"># git -C /usr/ports switch 2020Q4
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Where &lt;code>2020Q4&lt;/code> can be the year and quarter of your preference.&lt;/p>
&lt;p>This may take a minute. As of writing the Ports tree is just under 1GB in size. This isn&amp;rsquo;t downloading all the code for every package, mind you: the Ports tree is just a bunch of directories that &lt;em>point&lt;/em> to where the code exists on the internet for any given software. It will download and compile the software as you &lt;code>make&lt;/code> a given folder. Still, there are enough packages to make hefty even in this minimal state.&lt;/p>
&lt;p>At this point, feel free to switch off from root to your user account. We can do everything else with &lt;code>doas&lt;/code> if needed.&lt;/p>
&lt;h2 id="shell-setup">Shell setup
&lt;span>&lt;a href="#shell-setup">#&lt;/a>&lt;/span>
&lt;/h2>&lt;p>I like zshell (zsh) with ohmyzsh and the powerlevel10k theme. To add zsh, install the packages:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-zsh" data-lang="zsh">$ pkg install zsh zsh-completions ohmyzsh
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Go ahead and switch the root session to zsh by typing &lt;code>zsh&lt;/code>. Then change your normal user&amp;rsquo;s shell to use it by default:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-zsh" data-lang="zsh">$ chpass -s /usr/local/bin/zsh &amp;lt;user&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Create a new zsh config file for ohmyzsh:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-zsh" data-lang="zsh">$ cp /usr/local/share/ohmyzsh/templates/zshrc.zsh-template /home/&amp;lt;user&amp;gt;/.zshrc
$ chown &amp;lt;user&amp;gt;:&amp;lt;user&amp;gt; /home/&amp;lt;user&amp;gt;/.zshrc
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now you can clone your theme of choice (mine is p10k):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-zsh" data-lang="zsh">$ git clone --depth&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span> https://github.com/romkatv/powerlevel10k.git &lt;span style="color:#e6db74">${&lt;/span>ZSH_CUSTOM&lt;span style="color:#66d9ef">:-&lt;/span>$HOME/.oh-my-zsh/custom&lt;span style="color:#e6db74">}&lt;/span>/themes/powerlevel10k
&lt;/code>&lt;/pre>&lt;/div>&lt;p>And finally, set the theme in your user&amp;rsquo;s &lt;code>.zshrc&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-zsh" data-lang="zsh">ZSH_THEME&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;powerlevel10k/powerlevel10k&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The next time you log in as your non-root user, p10k will drop you into a configuration wizard.&lt;/p>
&lt;h2 id="pretty-chrome---installing-the-de">Pretty Chrome - Installing the DE
&lt;span>&lt;a href="#pretty-chrome---installing-the-de">#&lt;/a>&lt;/span>
&lt;/h2>&lt;p>I like xfce. You can use whatever you prefer, of course, but you&amp;rsquo;ll have to look elsewhere at this point, because this guide is going to go forward with the xfce4 desktop environment. I am also still using &lt;code>xorg&lt;/code> as my display manager, wayland isn&amp;rsquo;t &lt;em>quite&lt;/em> ready for my workflow yet.&lt;/p>
&lt;p>Start by installing the &lt;code>xfce&lt;/code> package (and optional goodies), plug the X-org server:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-zsh" data-lang="zsh">$ doas pkg install xfce xfce4-goodies xorg
&lt;/code>&lt;/pre>&lt;/div>&lt;p>At this point, things may be wildly different depending on the hardware you have. Refer to the &lt;a href="https://docs.freebsd.org/en/books/handbook/book/#x-config-video-cards">FreeBSD Handbook&lt;/a> for information best suited to your video hardware.&lt;/p>
&lt;p>I have an nVidia card (I know, boo), so I install the nvidia driver from Ports&lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-zsh" data-lang="zsh">$ cd /usr/ports/x11/nvidia-driver
$ doas make -DBATCH install clean
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Its also recommended to enable &lt;code>dbus&lt;/code> at this point, by adding the following lines to &lt;code>/etc/rc.conf&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-zsh" data-lang="zsh">dbus_enable&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;YES&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Add the user(s) that you expect to be using a GUI to the group &lt;code>video&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-zsh" data-lang="zsh">$ doas pw groupmod video -M &amp;lt;user&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="getting-the-keyboard-to-work">Getting the Keyboard to work
&lt;span>&lt;a href="#getting-the-keyboard-to-work">#&lt;/a>&lt;/span>
&lt;/h2>&lt;p>Hyper-V is an interesting creature - for Gen 1 VMs, the mouse and keyboard are emulated not as USB devices, but as the older PS/2-style devices &amp;ndash; even if your actual device is USB, FreeBSD will see a PS/2 device because that is what Hyper-V presents it.&lt;/p>
&lt;p>Since PS/2 is a pretty old technology and mostly deprecated, recent versions of FreeBSD no longer check for it by default. To re-enable this, add the following line to &lt;code> /etc/sysctl.conf&lt;/code>&lt;sup id="fnref:5">&lt;a href="#fn:5" class="footnote-ref" role="doc-noteref">5&lt;/a>&lt;/sup>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-zsh" data-lang="zsh">sysctl kern.evdev.rcpt_mask&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">6&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Go ahead and do a reboot.&lt;/p>
&lt;h2 id="getting-to-the-desktop">Getting to the Desktop
&lt;span>&lt;a href="#getting-to-the-desktop">#&lt;/a>&lt;/span>
&lt;/h2>&lt;p>Log in as your user, and create a file in your home directory called &lt;code>.xinitrc&lt;/code>. This file tells the Xorg server what to try and launch when you call &lt;code>startx&lt;/code> (or use a Desktop Manager to log in).&lt;/p>
&lt;p>For xfce, we add the following line:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-zsh" data-lang="zsh">exec startxfce4
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now for the fun part. Type &lt;code>startx&lt;/code>, sit back, and wait for things to load. If everything has gone right, you will now be in a default XFCE desktop. Click on the screen area to capture the mouse (&lt;code>ctrl&lt;/code>+&lt;code>alt&lt;/code>+&lt;code>left arrow&lt;/code> releases the mouse again). Try typing in a terminal.&lt;/p>
&lt;p>At this point, you will be at a basic starting point to experiment with BSD, do some dev work, etc.&lt;/p>
&lt;h2 id="conclusion">Conclusion
&lt;span>&lt;a href="#conclusion">#&lt;/a>&lt;/span>
&lt;/h2>&lt;h3 id="extra-credit">Extra Credit
&lt;span>&lt;a href="#extra-credit">#&lt;/a>&lt;/span>
&lt;/h3>&lt;p>If you want to see some more tips and tricks, and try really getting a nice desktop setup, I cannot recommend the &lt;a href="https://unixsheikh.com/tutorials/how-to-setup-freebsd-with-a-riced-desktop-part-1-basic-setup.html">unixsheikh.com how to setup FreeBSD with a riced desktop&lt;/a> series&lt;sup id="fnref:6">&lt;a href="#fn:6" class="footnote-ref" role="doc-noteref">6&lt;/a>&lt;/sup>. If you notice it looks similar to this guide, that isn&amp;rsquo;t a coincidence. I used this guide myself to install FreeBSD and eventually port my first desktop program from Linux.&lt;/p>
&lt;h3 id="why-bsd-reason-0-the-ports-collection">Why BSD? Reason 0: The Ports Collection
&lt;span>&lt;a href="#why-bsd-reason-0-the-ports-collection">#&lt;/a>&lt;/span>
&lt;/h3>&lt;p>There are a ton of cool features of all the BSDs, each worth considering and exploring. One that we very briefly touched on is the Ports collection. If you followed these steps, you will have already downloaded the Ports tree. The step where I installed the nvidia drivers is a high-level walkthrough of installing a port in itself, but if you want the brief steps:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Find the name of your desired app and its category. &lt;a href="https://docs.freebsd.org/en/books/handbook/book/#ports-finding-applications">There are multiple ways to find a package&lt;/a>, but I like to use the &lt;code>pkg search -o&lt;/code> command:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-zsh" data-lang="zsh">$ pkg search -o xfce4-docklike
...
x11/xfce4-docklike-plugin Modern, minimalist taskbar &lt;span style="color:#66d9ef">for&lt;/span> Xfce
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Go to the path listed in the output&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Type &lt;code>make config&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Type &lt;code>make install clean&lt;/code>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>That&amp;rsquo;s pretty much it. This is a super powerful tool that allows extreme customizability with ease, because you are with these three simple steps actually downloading and compiling from source!&lt;/p>
&lt;p>The BSD Ports system has been replicated in a couple other places, most notably in Gentoo Linux.&lt;/p>
&lt;hr>
&lt;p>At the end of the day, use the tools that best suit you. BSD is worth a look, though!&lt;/p>
&lt;p>Join me for part 2 (coming soon), where I show you the best way to work with Graphical interfaces in BSD on Hyper-V (Hint: its RDP).
&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>-Quentin &lt;br>
&lt;br>
&lt;br>
&lt;!-- raw HTML omitted -->&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>Okay its not too terrible; the official Hyper-V docs explain how to do it in &lt;a href="https://docs.microsoft.com/en-us/windows-server/virtualization/hyper-v/supported-freebsd-virtual-machines-on-hyper-v#BKMK_notes">the notes&lt;/a>. They &lt;em>say&lt;/em> its fixed in FreeBSD 11.0+ but I was having issues unless I did a &lt;code>gpart recover&lt;/code> in FreeBSD 13.0, so ehhh&amp;hellip; &lt;!-- raw HTML omitted -->Anyways, its not really any faster to use the pre-made image when you factor in expanding the &lt;code>.vhd&lt;/code> in Hyper-V, then booting into single-user, resizing the partition, and getting the FS inflated. Additionally, the pre-made image uses UFS instead of the newer and generally better ZFS.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>&lt;a href="https://flak.tedunangst.com/post/doas">https://flak.tedunangst.com/post/doas&lt;/a> is a great writeup on the creation of this tool by its author.&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3" role="doc-endnote">
&lt;p>&lt;strong>Note&lt;/strong>: &lt;code>doas&lt;/code> works by following the preferences of the &lt;em>last matching line&lt;/em>. That means if you put line 1 (&lt;code>permit :wheel&lt;/code>) at the end, then everything will require a password. Start with the most general, and progressively get more specific.&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4" role="doc-endnote">
&lt;p>The &lt;code>-DBATCH&lt;/code> flag tells the package and any dependencies to compile with defaults without asking. Normally its recommended to do a &lt;code>make config-recursive&lt;/code> and ensuring everything is as you like it. In this case, since this is a development VM that I don&amp;rsquo;t have to worry about uptime/stability/data loss, I don&amp;rsquo;t mind skipping this.&amp;#160;&lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:5" role="doc-endnote">
&lt;p>Full disclosure: I know that this is modifying a scan setting for device discovery, but I have &lt;em>no idea&lt;/em> why this makes the keyboard work. Its been recommended in a couple places (bugs.freebsd.org, reddit, FreeBSD forums) and works, but it is never explained &lt;strong>why&lt;/strong>. If anyone has an answer or can point me to the documentation, I&amp;rsquo;ll definitely write a post as a follow-up.&amp;#160;&lt;a href="#fnref:5" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:6" role="doc-endnote">
&lt;p>Parts 1 and 2 will cover getting set up in general, installing xfce, and doing some quality of life tweaks. Part 3 is for those who prefer a &lt;a href="https://en.wikipedia.org/wiki/Tiling_window_manager">tiling window manager&lt;/a> and is not required if you don&amp;rsquo;t want to install one of those.&amp;#160;&lt;a href="#fnref:6" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>OYD Chapter 2: DIY Cloud Backup</title><link>https://www.quentb.com/posts/diy-cloud-backup/</link><pubDate>Tue, 19 Oct 2021 13:55:24 -0400</pubDate><guid>https://www.quentb.com/posts/diy-cloud-backup/</guid><description>&lt;p>&lt;em>This is part of my ongoing series on Owning Your Data. &lt;a href="https://www.quentb.com/posts/own-data-intro/">Check out the prologue here&lt;/a>!&lt;/em>&lt;/p>
&lt;hr>
&lt;h2 id="money-traps">Money Traps
&lt;span>&lt;a href="#money-traps">#&lt;/a>&lt;/span>
&lt;/h2>&lt;p>At the heart of the popular cloud solution allure is that they are &lt;em>free&lt;/em>. Well, free at first (we will get into that later).&lt;/p>
&lt;p>There is a now oft-quoted statement first popularized by security expert Bruch Schneier. In 2010, &lt;a href="https://www.information-age.com/facebook-is-deliberately-killing-privacy-says-schneier-1290603/">he quite presciently said at a security conference&lt;/a>, &amp;ldquo;Don’t make the mistake of thinking you’re Facebook’s customer, you’re not – you’re the product. Its customers are the advertisers.&amp;rdquo;&lt;/p>
&lt;p>While I admit this has been overused and abused, it sticks because for a lot of free internet offerings, its right. Cloud is a bit of a conundrum for this model, though. While social media may have slipped the wool over the eyes of society and somehow convinced the majority of the public that its somehow okay, even normal to just give away all your info for free in a social context, people are at least suspicious of the technique when applied to their hard drive contents.&lt;/p>
&lt;p>I mean, even if you don&amp;rsquo;t immediately think of some embarrassing document, are you 100% certain that there &lt;em>isn&amp;rsquo;t&lt;/em> a textfile buried 5 folders deep somewhere containing your &lt;a href="https://xkcd.com/1360/">middle school love poetry&lt;/a>?&lt;/p>
&lt;p>You good with Google selling you ads based on that?&lt;/p>
&lt;p>Here are the privacy ratings of the Terms of Service for Google Drive, Dropbox, iCloud, and OneDrive (Microsoft) courtesy of the &lt;a href="https://tosdr.org/en/about">ToS;DR Project&lt;/a> (Click on the badges for the full breakdowns):&lt;/p>
&lt;p>&lt;a href="https://tosdr.org/en/service/270">&lt;img src="https://shields.tosdr.org/en_270.svg" alt="">&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://tosdr.org/en/service/291">&lt;img src="https://shields.tosdr.org/en_291.svg" alt="">&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://tosdr.org/en/service/217">&lt;img src="https://shields.tosdr.org/en_217.svg" alt="">&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://tosdr.org/en/service/244">&lt;img src="https://shields.tosdr.org/en_244.svg" alt="">&lt;/a>&lt;/p>
&lt;p>Some of the highlights:&lt;/p>
&lt;ul>
&lt;li>iCloud (Apple), Microsoft and Google reserve the right to delete any of your data, with &lt;em>no notice&lt;/em>, and for &lt;em>no reason&lt;/em>.&lt;/li>
&lt;li>All of these providers track your location and other &amp;ldquo;metadata&amp;rdquo;, and share it with third parties.&lt;/li>
&lt;/ul>
&lt;h2 id="meta-">Meta-
&lt;span>&lt;a href="#meta-">#&lt;/a>&lt;/span>
&lt;/h2>&lt;p>Metadata, by the way, is a really weird term that has a lot of baggage. In short, its &amp;ldquo;data about the data&amp;rdquo;: how big the file is, when it was created and last modified, the type of file, the &lt;em>name&lt;/em> of the file&amp;hellip; Basically, think about the data you see when looking in your &amp;ldquo;My Documents&amp;rdquo; folder &amp;ndash; everything except the file preview would be considered metadata. Here&amp;rsquo;s a fabricated example; do you feel like the owner of this data would be okay with arbitrary &amp;ldquo;third parties&amp;rdquo; seeing it?&lt;/p>
&lt;p>&lt;img src="mydocumentsexample.png" alt="">&lt;/p>
&lt;p>But that isn&amp;rsquo;t enough. Since, as far as I know, all major cloud providers are for-profit companies, they are compelled to increase both the amount of users, and the amount of value extracted from each user. That means in addition to the unsavory data brokering, cloud providers have taken a page out of the drug dealer&amp;rsquo;s playbook: offer a taste of free cloud storage as a loss-leader. Once you&amp;rsquo;ve gotten the handy synchronization set up, files gradually accumulate until the quota is hit sometime down the line, and then you get hit with the desktop pop-ups, emails, etc. warning you that &lt;em>you are in danger&lt;/em>, your precious files won&amp;rsquo;t be synced unless you pay us to upgrade!&lt;/p>
&lt;p>And at that point, with 5+ GB of data synced and the cloud provider deeply ingrained into your workflow&amp;hellip; what the heck, throw them a few bucks. You&amp;rsquo;re all set now, with up to 2 Terabytes of data storage! Woohoo!&lt;/p>
&lt;p>But, gosh, if we are all going to be sucked into paying for data storage, why are we okay with providers &amp;ldquo;double-dipping&amp;rdquo;? At that point, I would recommend looking at a provider that doesn&amp;rsquo;t play the freemium, ad-supported games: find a provider that charges &lt;em>up-front, right away&lt;/em>.&lt;/p>
&lt;p>If you are technically inclined, I cannot reccomend &lt;a href="https://rclone.org/">rclone&lt;/a> enough. This command &lt;a href="https://github.com/mitrichius/hugo-theme-anubisline">https://github.com/mitrichius/hugo-theme-anubisline&lt;/a> program (with a &lt;a href="https://rclone.org/gui/">GUI&lt;/a> in the works!) can map to pretty much any cloud provider as a front end. That means that if you want triple-redundant storage between your personal devices, an enterprise-class data host like AWS, and a consumer cloud product like Google Drive, you can. Even better: you don&amp;rsquo;t have to trust your data or metadata to these hosts, because you can configure rclone to &lt;a href="https://rclone.org/crypt/">encrypt&lt;/a> the data before upload; it will be transparently decrypted by rclone on retrieval if or when you ever need it.&lt;/p>
&lt;p>In this case, you could even look at using a public cloud provider &amp;ndash; all they would see is a bunch of random binary blobs &amp;ndash; but I&amp;rsquo;d still caution against it because providers like Google have been known to flex their &amp;ldquo;we can delete your data at any time for any reason muscles&amp;rdquo; and nuke binary blobs (ostensibly for &amp;ldquo;anti-piracy&amp;rdquo; reasons, as they argue &amp;ldquo;if a customer is hiding their data from us, that &lt;em>must&lt;/em> mean its illegal, right?&amp;quot;).&lt;/p>
&lt;hr>
&lt;h2 id="how-to-do-it">How to Do it
&lt;span>&lt;a href="#how-to-do-it">#&lt;/a>&lt;/span>
&lt;/h2>&lt;p>My personal setup for keeping all of my files across all my devices synced and backed up is this:&lt;/p>
&lt;ol>
&lt;li>Each device I have data I want saved is running an instance of Syncthing (see my &lt;a href="https://www.quentb.com/posts/personal-cloud/">last post&lt;/a> for more), usually the &amp;ldquo;My Documents&amp;rdquo;, &amp;ldquo;My Pictures&amp;rdquo;, etc folders (or Mac/Linux Equivalents)&lt;/li>
&lt;li>One of the syncthing nodes in my replication network is on my home &amp;ldquo;server&amp;rdquo; (basically a low-end PC with extra hard drives). I have a very small script that I wrote that uploads an encrypted copy of all this syncthing data to &lt;a href="https://www.backblaze.com/">Backblaze&lt;/a> on a weekly basis.&lt;/li>
&lt;/ol>
&lt;p>There is no step three. I have between 100 and 200 GB on Backblaze pretty consistently, and my average cost is 50-60¢ per month. Yes, &lt;em>cents&lt;/em>.&lt;/p>
&lt;p>I understand that I glossed over a lot of things here; one does not simply &amp;ldquo;write an rclone script&amp;rdquo; and attach it to a cron job without previous working knowledge of linux. Luckily, you don&amp;rsquo;t need to use linux, or have a dedicated server, for that matter. All you need is a primary computer that is regularly connected to the internet.&lt;/p>
&lt;p>Here is the steps I&amp;rsquo;d go through for doing it on Windows, assuming I&amp;rsquo;m running Syncthing on it already:&lt;/p>
&lt;ol>
&lt;li>Download rclone for windows&lt;/li>
&lt;li>Configure an rclone &lt;a href="https://rclone.org/overview/">backend&lt;/a>, e.g. &lt;a href="https://rclone.org/b2/">Backblaze&lt;/a>&lt;/li>
&lt;li>If I haven&amp;rsquo;t already, I change the folder and file options in windows to &lt;a href="https://www.howtogeek.com/205086/beginner-how-to-make-windows-show-file-extensions/">show file extensions&lt;/a> (I always turn this on when I set up Windows, anyways)&lt;/li>
&lt;li>Open up the Windows Explorer to my User folder (These days its easiest to go to &amp;ldquo;This PC&amp;rdquo; and click the up arrow next to the navbar)&lt;/li>
&lt;li>Right click, Select &lt;code>New &amp;gt; Text File&lt;/code>&lt;/li>
&lt;li>Put in a basic rclone &lt;code>sync&lt;/code> command, something like &lt;code>rclone sync C:\Users\MyUser\Documents Cloud:&lt;/code>&lt;/li>
&lt;li>Save the file as &lt;code>rclone_sync.cmd&lt;/code>&lt;/li>
&lt;li>Make an entry in &lt;a href="https://thegeekpage.com/how-to-create-advanced-tasks-in-task-scheduler-for-windows-10/">Windows Scheduler&lt;/a> to run that command on a regular basis&lt;/li>
&lt;/ol>
&lt;p>This, I admit, is still pretty technical, but it is at least approachable for a Windows user. If you absolutely don&amp;rsquo;t want to deal with your own configuration, which I totally understand, then at least use a &lt;em>paid-up-front&lt;/em> provider, none of the freemium nonsense. Backblaze, who I use with my manual config, offers an &lt;a href="https://www.backblaze.com/cloud-backup.html">easy solution&lt;/a> with &lt;strong>unlimited&lt;/strong> storage for $7 a month (not a sponsor, btw). Its more than pocket change, but you can just use a GUI and forget about it. And they aren&amp;rsquo;t the only option. They primarily focus on small business customers, but &lt;a href="https://www.crashplan.com/en-us/pricing/">crashplan&lt;/a> will happily offer you backup services for $10 a month &amp;ndash; my work uses them and I&amp;rsquo;ve found it a pretty nice setup.&lt;/p>
&lt;p>Otherwise, I have heard good things about &lt;a href="https://www.svsware.com/rebelbackup">Rebel Backup&lt;/a>, but I have not used it myself. It is essentially a user-friendly version of rclone crypt; it encrypts your backups before sending it to Dropbox or Google Drive. Since it sits on top of public cloud providers, my earlier caveat about spontaneous data deletion applies &amp;ndash; though it ameliorates it to a degree by allowing replication on multiple providers (i.e. a copy is sent to both Google Drive &lt;em>and&lt;/em> Dropbox). This product requires a $40 one-time purchase. If you use it long enough, that would potentially be a cheaper amortized cost than even my homebrew solution on Backblaze.&lt;/p>
&lt;h2 id="closing-thoughts">Closing Thoughts
&lt;span>&lt;a href="#closing-thoughts">#&lt;/a>&lt;/span>
&lt;/h2>&lt;h3 id="you-can-always-be-more-paranoid">You can always be more paranoid
&lt;span>&lt;a href="#you-can-always-be-more-paranoid">#&lt;/a>&lt;/span>
&lt;/h3>&lt;p>If you look at the privacy policy of paid providers, you may see some scary boilerplate. I must at this point argue for a bit of realpolitik and concede that as long as you are putting data in the &amp;ldquo;cloud&amp;rdquo;, its going to be on someone else&amp;rsquo;s computer and they will have data about you (your payment info, the IP you are uploading from). If this is an absolute no-no, then these posts aren&amp;rsquo;t for you and you should look at offsite data storage solutions, where you physically hand a briefcase of HDDs to a company that stores them somewhere secure (its not unheard of for these places to use caves or disused mines). One of my first jobs as an IT technician included me going to the security team, picking up a locked hard-sided briefcase, and delivering it to a storage provider; with chain-of-custody paperwork and everything.&lt;/p>
&lt;h3 id="the-411">The 411
&lt;span>&lt;a href="#the-411">#&lt;/a>&lt;/span>
&lt;/h3>&lt;p>But that is a bit off-topic. My high-level suggestions, in order of what you should consider, are:&lt;/p>
&lt;ol>
&lt;li>Use a tool like rclone to automatically encrypt and upload your data to a cloud provider.&lt;/li>
&lt;li>If you don&amp;rsquo;t want to deal with that, use a &lt;em>paid&lt;/em> backup tool.&lt;/li>
&lt;li>Try to use open-source offerings whenever practical.&lt;/li>
&lt;/ol>
&lt;p>Best of luck,&lt;/p>
&lt;p>Quentin&lt;/p></description></item><item><title>OYD Chapter 1: Personal Cloud</title><link>https://www.quentb.com/posts/personal-cloud/</link><pubDate>Wed, 06 Oct 2021 16:33:39 -0400</pubDate><guid>https://www.quentb.com/posts/personal-cloud/</guid><description>&lt;p>&lt;em>This is part of my ongoing series on Owning Your Data. &lt;a href="https://www.quentb.com/posts/own-data-intro/">Check out the prologue here&lt;/a>!&lt;/em>&lt;/p>
&lt;hr>
&lt;p>Clouds can be light and fluffy. They can also be&amp;hellip; not.&lt;/p>
&lt;p>&lt;img src="hurricane.webp" alt="A Picture of a Hurricane, taken by NASA">&lt;/p>
&lt;p>One massive convenience (and source of lock in) offered by major tech players is Cloud Storage. Its a big deal because its
(relatively) easy to set up, has predictable costs, and produces lots of &lt;em>recurring&lt;/em> revenue.&lt;/p>
&lt;p>In this first dive into personal data ownership, I&amp;rsquo;m going to walk through setting up and using an open-source
alternative to offerings like Dropbox and iCloud: &lt;a href="https://syncthing.net/">Syncthing&lt;/a>.&lt;/p>
&lt;h2 id="moving-stuff-around">Moving stuff around
&lt;span>&lt;a href="#moving-stuff-around">#&lt;/a>&lt;/span>
&lt;/h2>&lt;p>In the beginning was the punch card. This primitive source of &amp;ldquo;non-volatile&amp;rdquo; storage (just don&amp;rsquo;t light it on fire)
actually predates the popular concept of a computer by over 100 years: in 1801, the textile industry began using punched
&amp;ldquo;number cards&amp;rdquo; to automate complex weaving patterns in looms.&lt;/p>
&lt;p>&lt;img src="loom.webp" alt="An automatic Loom">&lt;/p>
&lt;p>The punch card was pretty much the go-to for transportable digital storage (minus specialty, bespoke solutions like &lt;a href="https://en.wikipedia.org/wiki/Magnetic-core_memory">Magnetic-core
memory&lt;/a>) until magnetic storage in the form of tape and floppy
drives finally superseded it.&lt;/p>
&lt;p>From there, we moved briefly to optical storage (CDs, DVDs), but that fell out of favor as solid-state storage
(essentially, specialized portable computers), offering much smaller size, resilience, and performance took over with
the help of Moore&amp;rsquo;s law.&lt;/p>
&lt;p>And now, in 2021, even flash drives and SD cards are beginning to feel&amp;hellip; quaint. Plugging in a thumb drive, manually
copying folders, physically traveling or sending the drive to the other device, manually pulling it from the drive; it
just cannot compete with the magical concept of installing a program, dropping the file into a special folder on your
computer and &lt;strong>bam&lt;/strong>, it is everywhere you have an internet connection &amp;ndash; and if SpaceX has anything to say about it,
that means pretty much the entire planet.&lt;/p>
&lt;p>But all this magic takes a lot of behind-the-scenes work. Its easy to forget that, under all the abstraction, ultimately
matter or energy is getting moved all the way from point A to point B, in a path that you could trace if you were
inclined to.&lt;/p>
&lt;p>Along the way, that data often sits on someone else&amp;rsquo;s server. And increasingly, modern culture is discovering all that
implies, both good and bad. As it turns out, a lot of big cloud providers, while saying niceties like &amp;ldquo;encryption at
rest&amp;rdquo;, &amp;ldquo;industry-leading security&amp;rdquo; and more, reading the privacy policies reveals all the major free services are not
only able to see your data, they are methodically combing through it at the behest of advertisers, governments, and in
some really bad cases, curious employees.&lt;/p>
&lt;p>There are a lot of really great tools to limit this. I would comfortably say that any major provider is &lt;em>probably&lt;/em> not
snooping (beyond some &lt;a href="https://www.apple.com/child-safety/pdf/CSAM_Detection_Technical_Summary.pdf">creative ways&lt;/a>ᵖᵈᶠ
of &amp;ldquo;checking without looking&amp;rdquo; for stuff like illegal material). But do we really have to just stop at mights and maybes?
What if we could short-circuit this whole thing and make the magical transfers happen without the ugly in-between
process?&lt;/p>
&lt;h2 id="my-first-try-nextcloud">My first try: Nextcloud
&lt;span>&lt;a href="#my-first-try-nextcloud">#&lt;/a>&lt;/span>
&lt;/h2>&lt;p>If you really want the whole 9 yards of collaborative document management, editing, sharing, etc., that a fully-featured
online productivity suite can offer (think Google Drive), the main name in the do-it-yourself space has got to be
&lt;a href="https://nextcloud.com/">Nextcloud&lt;/a>.&lt;/p>
&lt;p>I ran my own Nextcloud server on a home computer, and then a purpose-built NAS, for a few years. But I need to worry
about sharing files only once in a blue moon, and I was using a lot of resources to run this thing. It is also brittle;
you cannot set-and-forget this sort of thing.&lt;/p>
&lt;p>I could manage it with only an hour here or there of work, but getting computers to do stuff is my day job. I sat down
and reconsidered what I really &lt;em>needed&lt;/em>, and got this:&lt;/p>
&lt;ol>
&lt;li>I need to be able to easily move an arbitrary file or set of files from computer A to computer B&lt;/li>
&lt;li>I need to be able to occasionally share moderately large files with friends and family; not &lt;em>huge&lt;/em>, but enough that
an email attachment is pushing it.&lt;/li>
&lt;li>I want my data to persist in a way that even if all my computers simultaneously became unusable or inaccessible, I
could recover my files&lt;/li>
&lt;li>I want all this to happen without requiring upkeep or getting in my way&lt;/li>
&lt;/ol>
&lt;p>Nextcloud is pretty good at the first and second items; it is pretty darn close in feature parity and usage to Google
Drive. The third item is a problem, since it is running on a computer in my house, that is a single point of failure.
And the forth item? Forget it! I have had to learn way too much about nginx configuration, php-fpm sockets, in-memory
caching, databases&amp;hellip; This is something that is really only worth doing if you have an organization that wants its own
private cloud.&lt;/p>
&lt;p>Nextcloud does point you toward &lt;a href="https://nextcloud.com/signup/">preexisting free providers&lt;/a>, and I guess I&amp;rsquo;m a bit more
comfortable knowing that if I really, &lt;em>really&lt;/em> wanted to I could look at their source code, but this seems like going
back to Google Drive with a nice coat of paint.&lt;/p>
&lt;h2 id="the-current-setup">The Current Setup
&lt;span>&lt;a href="#the-current-setup">#&lt;/a>&lt;/span>
&lt;/h2>&lt;p>Luckily, I found &lt;a href="https://syncthing.net">Syncthing&lt;/a>. On the surface, this tool offers a much smaller set of features.
However, when I considered how much I used all the other bells and whistles outside of file sync on Nextcloud, I expect
I won&amp;rsquo;t mind. What I stand to gain is much better.&lt;/p>
&lt;p>Syncthing seeks to replicate the original promise of a tool like Dropbox: you have a folder or folders that you want to
exist on more than one device. When you modify, add, or remove a file in one place, the other places update to reflect
that. There are some more tweaks you can do if you want to get in the weeds, but this is the out of the box experience.&lt;/p>
&lt;p>&lt;img src="syncthing-logo.svg" alt="The Syncthing Logo">&lt;/p>
&lt;p>Syncthing by itself is just a light program running in the background, configurable by going to a special &amp;ldquo;localhost&amp;rdquo;
address in your browser (essentially, you are going to a website that you are running inside your own computer).
Syncthing&amp;rsquo;s official documentation recommends instead choosing one of the community tools that offers native desktop
support:&lt;/p>
&lt;ul>
&lt;li>For Windows, there is &lt;a href="https://github.com/canton7/SyncTrayzor/releases/latest">SyncTrayzor&lt;/a>&lt;/li>
&lt;li>For macOS; &lt;a href="https://github.com/syncthing/syncthing-macos/releases/latest">syncthing-macos&lt;/a>&lt;/li>
&lt;li>And Linux as always has a plethora of options. The most popular seems to be the cross-platform
&lt;a href="https://github.com/Martchus/syncthingtray">syncthingtray&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>There are others as well, including for iPhone and Android, listed in the Syncthing documentation: &lt;a href="https://docs.syncthing.net/users/contrib.html#contributions">https://docs.syncthing.net/users/contrib.html#contributions&lt;/a>&lt;/p>
&lt;p>Using Syncthing is disarmingly straightforward. I was sure I missed a step setting it up, but nope! I just install a
copy of Syncthing on the computers I want to distribute files among. Then, to get the party started you exchange each
device&amp;rsquo;s ID to each other device you want. It seems like a pain at first, but once you realize this is legitimately a
one-time thing it isn&amp;rsquo;t much different than logging in manually to Dropbox. Plus, once you&amp;rsquo;ve trusted one machine you
can mark it as a trusted &amp;ldquo;introducer&amp;rdquo;, and it can &lt;em>automagically&lt;/em>, well,
&amp;ldquo;&lt;a href="https://docs.syncthing.net/users/introducer.html">introduce&lt;/a>&amp;rdquo; your machine to the other machines
it knows, allowing zero-configuration propagation of a file through a connected mesh of machines.&lt;/p>
&lt;p>You can then go to any of the connected devices and select a folder, then share it with a few clicks. It will now
continuously ensure anything you change, anywhere, is made the same &lt;em>everywhere&lt;/em>.&lt;/p>
&lt;p>There are plenty more awesome tweaks you can do from here. If, like me, you are a &lt;a href="reddit.com/r/homelab">massive geek and have a dedicated
computer&lt;/a> for storage and other miscellany, you can tell that machine to only receive changes from
other devices and &lt;em>not&lt;/em> to broadcast its changes otherwise. As noted in the docs, &amp;ldquo;This mode is useful for replication
mirrors, backup destinations, or other cases where no local modifications are expected or allowed&amp;rdquo;, which is exactly
what I&amp;rsquo;ve done with my own setup.&lt;/p>
&lt;p>On the other hand, if you have a primary computer that you do most of your work on, and you just want to be able to
reference but not necessary change the files on other devices, you can choose to mark &lt;em>that&lt;/em> computer to only send
changes, ignoring changes on other devices.&lt;/p>
&lt;p>Each device can choose to keep a certain number of local versions of files, too: if you accidentally delete or modify a
file and want to undo it, this setting will let you restore an older version.&lt;/p>
&lt;p>This is all extra, though. The default &amp;ldquo;send &amp;amp; receive&amp;rdquo; setup is going to be just fine for 95% of people.&lt;/p>
&lt;p>The best way, ultimately, to find out if you&amp;rsquo;re comfortable making this sort of change is to try it in a safe and
limited manner. You can install it on two devices, and make a new folder somewhere (really, it can be &lt;em>anywhere&lt;/em>) called
&amp;ldquo;synced files&amp;rdquo;, then share it. Just try dropping something in the folder and looking on the other device.&lt;/p>
&lt;p>Keep that going for a while (maybe copy everything from your Dropbox or iCloud folder into it), then adjust and add as
you feel comfortable.&lt;/p>
&lt;hr>
&lt;p>If you go back to my short list of needed things, I feel I can comfortably cross off item 1 with Syncthing. Item 2 is
possible as well, but if I don&amp;rsquo;t want to deal with setting up a folder for a single transfer, my favorite option is
&lt;a href="https://bitwarden.com/products/send/">Bitwarden Send&lt;/a>. I get the full features for free by running my own instance, but
this is legitimately one tool I&amp;rsquo;m more okay using the hosted version of: by its nature, these files are meant to be
ephemeral and auto-delete after a preset number of days of your choosing. That is more comfortable to me than letting
years of random stuff (including tax returns at one point, yikes!) just accumulate in someone else&amp;rsquo;s computer, which is
what the cloud ultimately is.&lt;/p>
&lt;p>The 3rd point has a few potential solutions, from the super-manual (every month, copy the files to a USB SSD, stick that
SSD in a safe deposit box) to the completely hands-off (pay for an encrypted backup service).&lt;/p>
&lt;p>This has a few potential solutions, and I will cover those in the next post, along with my personal solution.&lt;/p>
&lt;p>Until then, be well, be safe, and be wise with your data.&lt;/p>
&lt;p>All the best,&lt;/p>
&lt;p>Quentin&lt;/p></description></item><item><title>Owning Your Data: Prolog</title><link>https://www.quentb.com/posts/own-data-intro/</link><pubDate>Tue, 05 Oct 2021 22:23:56 -0400</pubDate><guid>https://www.quentb.com/posts/own-data-intro/</guid><description>&lt;p>I used to be a huge fan of Google&amp;rsquo;s product offering. I started using Google Chrome around version 2, in 2009 &amp;ndash; before
it had added support for extensions, themes, or syncing between devices through your Google Account. It wasn&amp;rsquo;t a
juggernaut on the verge of becoming &lt;em>the&lt;/em> internet browser; instead it was introduced via a cute &lt;a href="https://www.google.com/googlebooks/chrome/index.html">interactive digital
comic book&lt;/a>, had bright blue colors and an icon that imparted a sense of futuristic alien tech, as if it had fallen from
the sky into the office of a bunch of Google hackers, who gifted it to the world.&lt;/p>
&lt;p>&lt;img src="old_chrome_icon_small.webp" alt="The original Google Chrome icon" title="Gotta Catch 'em All?">&lt;/p>
&lt;p>Around the same time, my sisters migrated off their MySpace accounts, following their friends to a hot new site that had
finally opened the doors to non-college students called &amp;ldquo;Facebook&amp;rdquo;.&lt;/p>
&lt;p>I remember when google launched this crazy idea of a word processor that you could use inside a browser. I remember
excitedly looking for an excuse to upload and share stuff on Google Drive, sure that it was an interesting experiment
that would fade fast.&lt;/p>
&lt;p>My close friend in high school got accepted into a crazy beta where Google was handing out &lt;a href="https://en.wikipedia.org/wiki/Chromebook#Cr-48">free
laptops&lt;/a> and merely asking for feedback in return. He showed it running this
exciting new Linux-based OS that Google was working on.&lt;/p>
&lt;hr>
&lt;p>It is hard to pinpoint the moment Facebook went from curious to creepy; Google from serendipitous to impersonal and
monolithic. I wish I could look back and see the last time I had used Google Chrome as my browser, but I know its been a
couple years.&lt;/p>
&lt;p>Something changed. If I as a user were a frog, I guess I finally decided the water is too hot. But now, stepping out of
these massive ecosystems is proving to be much harder than it was diving in.&lt;/p>
&lt;h2 id="winning-back-your-data">Winning Back your Data
&lt;span>&lt;a href="#winning-back-your-data">#&lt;/a>&lt;/span>
&lt;/h2>&lt;p>The modern privacy landscape is a &lt;em>wreck&lt;/em>. This is not exactly a controversial statement. In fact, I&amp;rsquo;d wager the general
response to that sentence is not disagreement, but a tired shrug. Yeah, Facebook, Google et. al. own our lives &amp;ndash; that
is just the choice we made as a society in exchange for all the cool free stuff, including:&lt;/p>
&lt;ul>
&lt;li>Spam emails from &amp;ldquo;Nigerian Princes&amp;rdquo;&lt;/li>
&lt;li>The latest hoaxes, fresh off the press and on top of our feed thanks to Carol, that one girl we kinda knew well enough
in high school that we begrudgingly accepted her friend request&lt;/li>
&lt;li>Shockingly accurate ads&amp;hellip; for the slippers we already bought yesterday&lt;/li>
&lt;/ul>
&lt;p>You may get the impression that I feel we got a raw deal. Cards on the table: yes, I think we did. The internet
advertising behemoth is a result of us taking a miraculously transformative technology that can deliver any
information from anywhere to anyone at the speed of light, kludging a quick solution to make it work for modern
capitalism, and then refusing to move on from the kludge.&lt;/p>
&lt;p>I do think that the era of advertising-funded free services is approaching a fork in the road, where it will either
effectively end for anything but the most trivial of services, or morph into something even darker.&lt;/p>
&lt;h2 id="fighting-the-fatigue">Fighting the Fatigue
&lt;span>&lt;a href="#fighting-the-fatigue">#&lt;/a>&lt;/span>
&lt;/h2>&lt;p>Be it Climate Change, Polarization of Society, or Electronic Privacy, it is easy to get decision fatigue and give up.
Sure, there are many, many ways to opt out of the circus; lots of weird geeks on the internet have produced guides on
how to do so that are simultaneously uncomfortably complex and yet full of unaddressed questions or assumed knowledge.&lt;/p>
&lt;p>I don&amp;rsquo;t blame the average user for not wanting to wade into it.&lt;/p>
&lt;p>If we want to change the direction things are headed, it requires more than individual action. We ultimately may need
the State to step in and fix things, and that opens up a big can of worms that is out of scope for this essay.&lt;/p>
&lt;p>Right here, right now, I&amp;rsquo;m talking to &lt;em>you&lt;/em>, dear reader. As in, you, the person reading this. Perhaps you, like me,
have felt increasingly uncomfortable about the stuff you have heard or seen from large tech companies. If you have
Google Maps on your phone and signed in, maybe you came across the &lt;a href="https://www.google.com/maps/timeline">Google Maps
Timeline&lt;/a> and after erasing it as fast as you could, started looking for at least
a way to get &lt;em>some&lt;/em> of your life and data in your own hands.&lt;/p>
&lt;h3 id="a-series">A Series
&lt;span>&lt;a href="#a-series">#&lt;/a>&lt;/span>
&lt;/h3>&lt;p>I feel a sense of obligation. I am a software engineer; I see the sausage get made and I can credit my livelihood in
part to the work and profit of this industry. What I can offer is not a complete &amp;ldquo;hermetic seal&amp;rdquo; solution, but rather
steps that are easy to take, require minimum maintenance, and set you up to take additional steps away from the public,
ad-supported cloud when or if you feel ready.&lt;/p>
&lt;p>I will be tagging all the posts relating to this with the
&amp;ldquo;&lt;a href="https://www.quentb.com/tags/own-data-series">own-data-series&lt;/a>&amp;rdquo; tag, so you can find it all in one place.&lt;/p>
&lt;p>So long for now,&lt;/p>
&lt;p>Quentin&lt;/p></description></item><item><title>Introductions</title><link>https://www.quentb.com/posts/introductions/</link><pubDate>Tue, 05 Oct 2021 21:57:27 -0400</pubDate><guid>https://www.quentb.com/posts/introductions/</guid><description>&lt;h2 id="a-new-new-new-new-blog">A new new new (new?) Blog
&lt;span>&lt;a href="#a-new-new-new-new-blog">#&lt;/a>&lt;/span>
&lt;/h2>&lt;p>Randall Munroe, among others, has noted the chronic problem of content producers who can&amp;rsquo;t commit.
&lt;img src="https://imgs.xkcd.com/comics/superlative.png" alt="xkcd comic #621" title="Stay while I recount the crazy TF2 kill I managed
yesterday, my friends.">&lt;/p>
&lt;p>I&amp;rsquo;m not going to try and promise I&amp;rsquo;ll post a lot, or even that this blog won&amp;rsquo;t go stale, disappear, and maybe be
replaced by yet another in 2 years &amp;ndash; history shows this is likely.&lt;/p>
&lt;p>I do hope you find something interesting here that tickles your mind and causes you to stop and ponder, if only for a
moment. In times like these, that is a great accomplishment for writers; now we have to fight for your attention with
literally the entire world.&lt;/p>
&lt;p>So if you are reading this, thank you. You could be watching cat videos, Minecraft let&amp;rsquo;s plays, or doom-scrolling your
&lt;del>drug&lt;/del> social media feed of choice.&lt;/p>
&lt;p>Here, in brief, is what I&amp;rsquo;d like to offer you. If you think that any of this sounds interesting, I invite you to
bookmark this site, subscribe to the RSS feed (yes those still exist) or just set a calendar event a couple months out
to &amp;ldquo;go see what Quentin wrote, if anything&amp;rdquo;.&lt;/p>
&lt;h2 id="while-supplies-last">While Supplies Last
&lt;span>&lt;a href="#while-supplies-last">#&lt;/a>&lt;/span>
&lt;/h2>&lt;p>On this blog, I will write about the utterly, painfully mundane. I may write about trying to color match the carpet in my
apartment.&lt;/p>
&lt;p>I will write about technology. Its in my nature to buzz around the newest gadgets like a moth around lamps.&lt;/p>
&lt;p>I will probably write a few semi-serious reviews of stuff. This may be books, my newest headphones, my car, or the local
asphalt conditions. Practicing distilling an opinion into something presentable is a worthwhile endeavor.&lt;/p>
&lt;p>I will more than likely complain or obsess over language. Upfront, I will state: I am pro-oxford-comma, I think split
infinitives are fine, and in my opinion you are almost certainly over-using adverbs.&lt;/p>
&lt;p>I will vent. Its like writing a diary, but with the added excitement of cutting-edge global networks taking the hassle
out of the old-school &amp;ldquo;sneaking into my room while I&amp;rsquo;m distracted, finding the journal, and trying to giggle silently&amp;rdquo;.&lt;/p>
&lt;p>All the best,&lt;/p>
&lt;p>Quentin&lt;/p></description></item></channel></rss>